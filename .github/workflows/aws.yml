name: Deploy to EC2

on:
  push:
    branches: [ main ]  # Trigger deployment on push to main branch
  workflow_dispatch:    # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Optional: Setup Node.js environment if needed
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      
      # Optional: Install dependencies and build if needed
      # - name: Install dependencies
      #   run: npm ci
      # - name: Build project
      #   run: npm run build
      
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SSH_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ${{ secrets.EC2_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host ec2\n\tHostName $SSH_HOST\n\tUser $SSH_USER\n\tIdentityFile ~/.ssh/deploy_key\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      
      - name: Deploy to EC2
        run: |
          # Create a tar archive of your code
          tar -czf deploy.tar.gz *
          
          # Copy to EC2
          scp -o StrictHostKeyChecking=no deploy.tar.gz ec2:~/
          
          # Deploy commands via SSH
          ssh ec2 << 'EOL'
            # Set deployment directory (adjust as needed)
            DEPLOY_DIR=/var/www/html
            
            # Backup current deployment (optional)
            if [ -d "$DEPLOY_DIR" ]; then
              sudo cp -r $DEPLOY_DIR $DEPLOY_DIR.backup-$(date +%Y%m%d%H%M%S)
            fi
            
            # Extract new deployment
            mkdir -p ~/deployment
            tar -xzf ~/deploy.tar.gz -C ~/deployment
            
            # Move to web directory (may require sudo)
            sudo rm -rf $DEPLOY_DIR/*
            sudo cp -r ~/deployment/* $DEPLOY_DIR/
            
            # Fix permissions
            sudo chown -R www-data:www-data $DEPLOY_DIR
            
            # Restart Nginx
            sudo systemctl restart nginx
            
            # Clean up
            rm ~/deploy.tar.gz
            rm -rf ~/deployment
          EOL
